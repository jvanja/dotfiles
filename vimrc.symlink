" for use in snippets
let g:snips_author = "vanja"
let g:snips_email = "jelicvanja@gmail.com"
let g:snips_github = "https://github.com/jvanja"

" let vim know to use BREW version of pythons
" let g:python_host_prog = '/usr/local/bin/python2'
let g:python3_host_prog = '/usr/local/bin/python3'


" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

" temp file for crontab
autocmd filetype crontab setlocal nobackup nowritebackup

" 'matchit.vim' is built-in so let's enable it!
" Hit '%' on 'if' to jump to 'else'.
runtime macros/matchit.vim

" Minimal automatic indenting for any filetype.
set autoindent

" vim polyglot is super slow when opening VUE files if this is not set
let g:polyglot_disabled = ['vue']

" plugins
source ~/.vim_plugins

" for vim-devicons to show
set encoding=utf8

set termguicolors
set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
  \,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor
  \,sm:block-blinkwait175-blinkoff150-blinkon175

" set undodir=~/.vim/undodir//
" set undofile
" set history=100
" set undolevels=100

set timeoutlen=1000 ttimeoutlen=0

" set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types:h11
" set guifont=Sauce\ Code\ Pro\ Nerd\ Font\ Complete:h11
set guifont=Hack\ Nerd\ Font\ Regular:h11

" set leader key to ,
let mapleader = ","

" jk is escape
" inoremap jk <esc>

" Enable syntax highlighting
filetype off
filetype plugin indent on
syntax on

" for SquareSpace temaplates
au BufReadPost *.item set syntax=html
au BufRead,BufNewFile *.ejs set filetype=html


" Vue.js syntax
" autocmd BufRead,BufNewFile *.vue setlocal filetype=vue.html.javascript.css
autocmd BufRead,BufNewFile *.vue setlocal filetype=vue

" Showing line numbers and length
set number
" width of document (used by gd)
set tw=79

" setting relative numbers 
set relativenumber!

" toggle relativenumber 
nnoremap <C-n> :set relativenumber!<cr>

" set nowrap  " don't automatically wrap on load
" set fo-=t   " don't automatically wrap text when typing
set wrap linebreak nolist " wrap text pls

" Tab size
set shiftwidth=2
" show existing tab with 2 spaces width
set tabstop=2
" when indenting with '>', use 2 spaces width
set shiftwidth=2  
" On pressing tab, insert 2 spaces
set expandtab

" autocompletion for command menu on TAB
set wildmenu wildmode=full

" Proper backspace behavior.
set backspace=indent,eol,start

" block select pass shortest line
set virtualedit=block

" turn on search highlight
set hlsearch
set ignorecase
set smartcase
set incsearch

" enable scroll
:set mouse=a

"show status bar always
set laststatus=2

" javascript syntax
let g:used_javascript_libs = 'jquery, react, angularjs'
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS

" save file with leader s
noremap <leader>s :w<cr>
" save and quit 
noremap <leader>x :wq<cr>
" quit file with leader q
noremap <leader>q :q<cr>
" delete buffer with leader w
noremap <leader>w :bdelete<cr>
" save file with leader s when in insert mode
inoremap <leader>s <C-c>:w<cr>
" save and quit file with leader x when in insert mode
inoremap <leader>x <C-c>:wq<cr>

"in the news execute shell command under cursor
noremap Q !!$SHELL<cr>

"copy in visual mode with ctrc c to system clipboard
vnoremap <leader>y "*y
" noremap <C-v> :r !pbpaste<CR><CR>

" paste mode toggle
map <leader>p :set paste!<CR>

" move lines with ALT j and ALT k
nnoremap ˚ :m .-2<CR>==
nnoremap ∆ :m .+1<CR>==

inoremap ˚ <Esc>:m .-2<CR>==gi
inoremap ∆ <Esc>:m .+1<CR>==gi

vnoremap ˚ :m '<-2<CR>gv=gv
vnoremap ∆ :m '>+1<CR>gv=gv

"enable system clipboard
" set clipboard+=unnamedplus

noremap <leader>i gg=G``

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" NAVIGATION
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" move rows up and down and not lines.. for wrapped text
:nmap j gj
:nmap k gk

" move to begining and end of line with H and L
nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L $

" go to line number with 12<enter> instead of 12G 
nnoremap <CR> G 
" except in quickfix
autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR> 

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" QUICKFIX
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
nnoremap <Down> :cn<CR>
nnoremap <Up> :cp<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" BUFFERS
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
nnoremap gb :ls<CR>:buffer<Space>
" nnoremap gB :ls<CR>:sbuffer<Space>
nnoremap gB :ls<CR>:vert belowright sb<Space>
nnoremap <leader>b :buffer *
nnoremap <leader>B :sbuffer *
" nmap <leader><leader> <C-^>

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" NERDTREE
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
"map /nt to :NERDTree
nnoremap /nt :NERDTreeToggle<CR>

" show hidden files in nerd tree
let NERDTreeShowHidden=1

" Don't display these kinds of files
let NERDTreeIgnore=['\~$', '\.pyc', '\.swp$', '\.git', '\.hg', '\.svn',
      \ '\.ropeproject', '\.o', '\.bzr', '\.ipynb_checkpoints$',
      \ '__pycache__',
      \ '\.egg$', '\.egg-info$', '\.tox$', '\.idea$', '\.sass-cache',
      \ '\.env$', '\.env[0-9]$', '\.coverage$', '\.tmp$', '\.gitkeep$',
      \ '\.coverage$', '\.webassets-cache$', '\.vagrant$', '\.DS_Store',
      \ '\.env-pypy$',
      \ 'node_modules']

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" THEME
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" mkdir -p ~/.vim/cgit clone https://github.com/trusktr/seti.vim ~/.vim/bundle/seti.vimolors && cd ~/.vim/colors
" wget -O wombat256mod.vim http://www.vim.org/scripts/download_script.php?src_id=13400
" set t_Co=256 " using  let $NVIM_TUI_ENABLE_TRUE_COLOR=1 on NeoVim
set background=dark
"colorscheme OceanicNext
" colorscheme Tomorrow-Night
colorscheme dracula

" highlight  the current  line number
hi CursorLineNr cterm=bold ctermfg=NONE gui=bold guifg=white 


""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" AIRLINE
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#buffer_nr_show = 1

" show buffer index in airline tabline
let g:airline#extensions#tabline#buffer_idx_mode = 1

nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" Powerline symbols to show in airline 
let g:airline_powerline_fonts = 1

function! AirlineInit()
    let g:airline_section_a = airline#section#create(['mode', ' ', 'branch'])
    let g:airline_section_b = airline#section#create_left(['ffenc', 'hunks', '%f'])
    let g:airline_section_c = airline#section#create(['filetype'])
    let g:airline_section_x = airline#section#create(['%P'])
    let g:airline_section_y = airline#section#create(['%B'])
    let g:airline_section_z = airline#section#create_right(['%l', '%c'])
endfunction
autocmd VimEnter * call AirlineInit()

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" FUGITIVE
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
nnoremap <leader>ga :Git add %:p<CR><CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit -v -q<CR>
" nnoremap <leader>gt :Gcommit -v -q %:p<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>ge :Gedit<CR>
" nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR><CR>
nnoremap <leader>gac :Git add -A . && git commit<CR><CR>
nnoremap <leader>glo :silent! Glog<CR>:bot copen<CR>
" nnoremap <leader>grp :Ggrep<Space>
" nnoremap <leader>gm :Gmove<Space>
nnoremap <leader>gb :Git branch<Space>
nnoremap <leader>go :Git checkout<Space>
nnoremap <leader>gp :Gpush<CR>
nnoremap <leader>gl :Gpull<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" EMMET
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" " emmet conflicts with ultisnips
" let g:user_emmet_leader_key=','	" Emmet triggered with ,,

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" SEARCHING
"""""""""""""""""""""""""""""""""""""""""""""""""""""
" search and replace in file with ctrl f
nmap <C-f> :%s///g<left><left><left>
vmap <C-f> :s///g<left><left><left>
map <leader>r :Far  **/*.*<left><left><left><left><left><left><left>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" set search highlight color
" hi Search cterm=NONE ctermfg=white ctermbg=blue
highlight search ctermfg=white ctermbg=3423513
"turn off highlight with ,n
nnoremap <leader>n :nohl<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""
" FZF
"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ignore files in .gitignore
" let $FZF_DEFAULT_COMMAND = 'ag --ignore node_modules -l -g ""'
" let $FZF_DEFAULT_COMMAND = 'ag --ignore-dir node_modules -g ""'
let $FZF_DEFAULT_COMMAND = 'ag -U -g ""'

" open file with leader o using fzf
" nnoremap <leader>o :Files<CR>
" nmap <leader>o :call fzf#run(fzf#wrap({'source': 'git ls-files --exclude-standard --others --cached'}))<CR>
nnoremap <leader>o :call SearchProject()<CR>

imap <C-x><C-f> <plug>(fzf-complete-file-ag)
imap <C-x><C-l> <plug>(fzf-complete-line)
nnoremap <silent> K :call SearchWordWithAg()<CR>

function! s:sub(str,pat,rep) abort
  return substitute(a:str,'\v\C'.a:pat,a:rep,'')
endfunction

function! SearchProject()
  let path = s:sub(expand('<sfile>:p:h'), '[\/]$', '') . '/'
  let gitpath = '.git/'
  if getfsize(gitpath.'HEAD') > 10 && (
        \ isdirectory(gitpath.'objects') && isdirectory(gitpath.'refs') ||
        \ getftype(gitpath.'commondir') ==# 'file')
		call fzf#run(fzf#wrap({'source': 'git ls-files --exclude-standard --others --cached'}))
	else
    call fzf#vim#files(path)
    " call fzf#vim#files(path, fzf#vim#with_preview())
	endif
endfunction

function! SearchWordWithAg()
  if len(expand('<cword>')) < 2 | return | endif
  execute 'Ag' expand('<cword>')
endfunction

nnoremap <silent> <leader>/ :execute 'Ag ' . input('Ag/')<CR>

" search with :Agu including ignored files in gitignore..
" command! -bang -nargs=* Agu call fzf#vim#ag(<q-args>, '--skip-vcs-ignores', {'down': '~40%'})
command! -bang -nargs=* Agu call fzf#vim#ag(<q-args>, {'down': '~40%', 'options': '-n 2..'})
" map ,g to :Agu
nnoremap <silent> <leader>g :Agu<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" ULTISNIPS
"""""""""""""""""""""""""""""""""""""""""""""""""""""
" " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<C-k>"
" let g:UltiSnipsJumpForwardTrigger="<C-b>"
" let g:UltiSnipsJumpBackwardTrigger="<C-z>"

"""""""""""""""""""""""""""""""""""""""""""""""""""""
"  COC Setup
"""""""""""""""""""""""""""""""""""""""""""""""""""""
source ~/.vim/vimcoc.settings

"""""""""""""""""""""""""""""""""""""""""""""""""""""
"  ALE
"""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:ale_javascript_eslint_use_global = 1
" let g:ale_fix_on_save = 1
"
"
" let g:ale_fixers = {
" \   'javascript': ['eslint'],
" \   'vue': ['eslint']
" \}
"
" let g:ale_linters = {
" \   'html': [],
" \   'javascript': ['eslint'],
" \   'python': ['flake8'],
" \   'php': ['phpcs'],
" \}
"
" let g:ale_pattern_options = {'\.php$': {'ale_enabled': 0}}
"
" " Navigate between eslint errors
" nmap <silent> <leader>k <Plug>(ale_previous_wrap)
" nmap <silent> <leader>j <Plug>(ale_next_wrap)

"""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Indent Guides
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#444444   ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#353535 ctermbg=4

