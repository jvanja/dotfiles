" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

" temp file for crontab
autocmd filetype crontab setlocal nobackup nowritebackup

" plugins
source ~/.vim_plugins

" for vim-devicons to show
set encoding=utf8

let $NVIM_TUI_ENABLE_TRUE_COLOR=1
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

" set guifont=<FONT_NAME>:h<FONT_SIZE>
" set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types:h11
set guifont=Sauce\ Code\ Pro\ Nerd\ Font\ Complete:h11

" set leader key to ,
let mapleader = ","

" jk is escape
" inoremap jk <esc>

" Enable syntax highlighting
filetype off
filetype plugin indent on
syntax on

" for SquareSpace temaplates
au BufReadPost *.item set syntax=html

" Showing line numbers and length
set number
" width of document (used by gd)
set tw=79

" setting relative numbers 
set relativenumber

" toggle relativenumber 
nnoremap <C-n> :set relativenumber!<cr>

" set nowrap  " don't automatically wrap on load
" set fo-=t   " don't automatically wrap text when typing
set wrap linebreak nolist " wrap text pls

" Tab size
set shiftwidth=2
" show existing tab with 2 spaces width
set tabstop=2
" when indenting with '>', use 4 spaces width
set shiftwidth=2
" On pressing tab, insert 4 spaces
set expandtab

" autocompletion for command menu on TAB
set wildmenu wildmode=full

" turn on search highlight
set hlsearch
set ignorecase
set smartcase
set incsearch

" enable scroll
:set mouse=a

"show status bar always
set laststatus=2

" javascript syntax
let g:used_javascript_libs = 'jquery, react, angularjs'
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS

" save file with leader s
noremap <leader>s :w<cr>
" save and quit 
noremap <leader>x :wq<cr>
" quit file with leader q
noremap <leader>q :q<cr>
" delete buffer with leader w
noremap <leader>w :bdelete<cr>
" save file with leader s when in insert mode
inoremap <leader>s <C-c>:w<cr>
" save and quit file with leader x when in insert mode
inoremap <leader>x <C-c>:wq<cr>
command! Q q " Bind :Q to :q

" copy in visual mode with ctrc c to system clipboard
" vnoremap <C-c> :w !pbcopy<CR><CR> 
" noremap <C-v> :r !pbpaste<CR><CR>

" paste mode toggle
map <leader>p :set paste!<CR>

" move lines with ALT j and ALT k
nnoremap ˚ :m .-2<CR>==
nnoremap ∆ :m .+1<CR>==

inoremap ˚ <Esc>:m .-2<CR>==gi
inoremap ∆ <Esc>:m .+1<CR>==gi

vnoremap ˚ :m '<-2<CR>gv=gv
vnoremap ∆ :m '>+1<CR>gv=gv

"enable system clipboard
" set clipboard+=unnamedplus

noremap <leader>i gg=G``

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" AUTOCLOSING BLOCKS
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
inoremap (<CR> (<CR>)<Esc>O
inoremap {<CR> {<CR>}<Esc>O
inoremap {; {<CR>};<Esc>O
inoremap {, {<CR>},<Esc>O
inoremap [<CR> [<CR>]<Esc>O
inoremap [; [<CR>];<Esc>O
inoremap [, [<CR>],<Esc>O

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" NAVIGATION
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" move rows up and down and not lines.. for wrapped text
:nmap j gj
:nmap k gk

nnoremap H ^
nnoremap L $
" go to line number with 12<enter> instead of 12G 
nnoremap <CR> G 
" except in quickfix
autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR> 
" go begining of file with backspace
nnoremap <BS> gg

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" BUFFERS
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
nnoremap gb :ls<CR>:buffer<Space>
" nnoremap gB :ls<CR>:sbuffer<Space>
nnoremap gB :ls<CR>:vert belowright sb<Space>
nnoremap <leader>b :buffer *
nnoremap <leader>B :sbuffer *
nmap <leader><leader> <C-^>
nmap <leader>m :bnext<CR>
nmap <leader>. :bprevious<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" NERDTREE
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
"map /nt to :NERDTree
nnoremap /nt :NERDTreeToggle<CR>

" show hidden files in nerd tree
let NERDTreeShowHidden=1

" Don't display these kinds of files
let NERDTreeIgnore=['\~$', '\.pyc', '\.swp$', '\.git', '\.hg', '\.svn',
      \ '\.ropeproject', '\.o', '\.bzr', '\.ipynb_checkpoints$',
      \ '__pycache__',
      \ '\.egg$', '\.egg-info$', '\.tox$', '\.idea$', '\.sass-cache',
      \ '\.env$', '\.env[0-9]$', '\.coverage$', '\.tmp$', '\.gitkeep$',
      \ '\.coverage$', '\.webassets-cache$', '\.vagrant$', '\.DS_Store',
      \ '\.env-pypy$',
      \ 'node_modules']

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" CTRLP
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" ctrlp ignore files and folders
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
let g:ctrlp_working_path_mode = 'a'
let g:ctrlp_mruf_relative = 1
let g:ctrlp_regexp = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" THEME
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" mkdir -p ~/.vim/cgit clone https://github.com/trusktr/seti.vim ~/.vim/bundle/seti.vimolors && cd ~/.vim/colors
" wget -O wombat256mod.vim http://www.vim.org/scripts/download_script.php?src_id=13400
" set t_Co=256 " using  let $NVIM_TUI_ENABLE_TRUE_COLOR=1 on NeoVim
set background=dark
colorscheme OceanicNext
" highlight  the current  line number
hi CursorLineNr cterm=bold ctermfg=NONE gui=bold guifg=white 

let g:airline_theme='oceanicnext'

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" AIRLINE
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#buffer_nr_show = 1

" show buffer index in airline tabline
let g:airline#extensions#tabline#buffer_idx_mode = 1

nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" Powerline symbols to show in airline 
let g:airline_powerline_fonts = 1

function! AirlineInit()
    let g:airline_section_a = airline#section#create(['mode', ' ', 'branch'])
    let g:airline_section_b = airline#section#create_left(['ffenc', 'hunks', '%f'])
    let g:airline_section_c = airline#section#create(['filetype'])
    let g:airline_section_x = airline#section#create(['%P'])
    let g:airline_section_y = airline#section#create(['%B'])
    let g:airline_section_z = airline#section#create_right(['%l', '%c'])
endfunction
autocmd VimEnter * call AirlineInit()

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" FUGITIVE
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
nnoremap <leader>ga :Git add %:p<CR><CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit -v -q<CR>
" nnoremap <leader>gt :Gcommit -v -q %:p<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>ge :Gedit<CR>
" nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR><CR>
nnoremap <leader>gac :Git add -A . && git commit<CR><CR>
nnoremap <leader>glo :silent! Glog<CR>:bot copen<CR>
" nnoremap <leader>grp :Ggrep<Space>
" nnoremap <leader>gm :Gmove<Space>
nnoremap <leader>gb :Git branch<Space>
nnoremap <leader>go :Git checkout<Space>
nnoremap <leader>gp :Gpush<CR>
nnoremap <leader>gl :Gpull<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" EMMET
""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" emmet conflicts with ultisnips
let g:user_emmet_leader_key=','	" Emmet triggered with ,,

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" SEARCHING
"""""""""""""""""""""""""""""""""""""""""""""""""""""
" search and replace in file with ctrl f
map <C-f> :%s///g<left><left><left>

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" set search highlight color
" hi Search cterm=NONE ctermfg=white ctermbg=blue
highlight search ctermfg=white ctermbg=3423513


"""""""""""""""""""""""""""""""""""""""""""""""""""""
" FZF
"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ignore files in .gitignore
let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'

" open file with leader o using fzf
nnoremap <leader>o :Files<CR>
imap <C-x><C-f> <plug>(fzf-complete-file-ag)
imap <C-x><C-l> <plug>(fzf-complete-line)
nnoremap <silent> K :call SearchWordWithAg()<CR>

function! SearchWordWithAg()
  if len(expand('<cword>')) < 2 | return | endif
  execute 'Ag' expand('<cword>')
endfunction

nnoremap <silent> <leader>/ :execute 'Ag ' . input('Ag/')<CR>

" search with :Agu including ignored files in gitignore..
" command! -bang -nargs=* Agu call fzf#vim#ag(<q-args>, '--skip-vcs-ignores', {'down': '~40%'})
command! -bang -nargs=* Agu call fzf#vim#ag(<q-args>, {'down': '~40%'})
" map ,g to :Agu
nnoremap <silent> <leader>g :Agu<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" ULTISNIPS
"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<C-k>"
let g:UltiSnipsJumpForwardTrigger="<C-b>"
let g:UltiSnipsJumpBackwardTrigger="<C-z>"

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" YOUCOMPLETEME
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ycm_path_to_python_interpreter = '/usr/local/bin/python'
let g:python_host_prog = '/usr/local/bin/python3'
let g:python3_host_prog = '/usr/local/bin/python3'


"""""""""""""""""""""""""""""""""""""""""""""""""""""
" NEOMAKE
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:neomake_open_list = 0

" let g:neomake_php_enabled_makers = ['phpcs']
" let g:neomake_php_phpcs_args_standard = 'PSR2'

let g:neomake_javascript_enabled_makers = ['eslint']

let g:neomake_javascript_eslint_maker = {
	\ 'args': ['eslint', '-f', 'compact'],
	\ 'errorformat': '%E%f: line %l\, col %c\, Error - %m,' .
	\ '%W%f: line %l\, col %c\, Warning - %m'
	\ }

autocmd! BufWritePost *.js Neomake

function StandardJSFormat()
	silent !standard-format -w %
	set autoread
	Neomake
endfunction

nnoremap <leader>f :call StandardJSFormat()<CR>

